package check.com;

import com.google.api.client.auth.oauth2.Credential;

import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.SheetsScopes;
import com.google.api.services.sheets.v4.model.ValueRange;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
@Controller
public class MineController {

	private static  String APPLICATION_NAME="Google Sheet";
	private static Sheets sheets;
	private static  String SpreadSheetID="1zgWxYqHZPADfP9lzqGTU46RD5e-ekkAHLutJ7c1WR-U";

	
	@RequestMapping("/")
	public ModelAndView handler(HttpServletRequest request,HttpServletResponse response) throws IOException {
	ModelAndView model = new ModelAndView("index");
	
	System.out.println("First handler is working");
			return model;
	}
	private static Credential authorize() throws Exception {
		InputStream in = SpredSheetRead.class.getResourceAsStream("/credentials.json");
		GoogleClientSecrets clentSecrets = GoogleClientSecrets.load(JacksonFactory.getDefaultInstance(), new InputStreamReader(in));
		
		List<String> scope = Arrays.asList(SheetsScopes.SPREADSHEETS);
		System.out.println(scope+"==============scope");
		GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(GoogleNetHttpTransport.newTrustedTransport()
				, JacksonFactory.getDefaultInstance(), clentSecrets, scope)
				.setDataStoreFactory(new FileDataStoreFactory(new java .io.File("token")))
				.setAccessType("offline").build();
		System.out.println(flow+"flow====================");
		//LocalServerReceiver receiver =new LocalServerReceiver.Builder().setPort(1000).build();
		//System.out.println(receiver+"receiver===============");
		//Credential cred = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
		 LocalServerReceiver localServerReceiver = new LocalServerReceiver.Builder().setPort(8888).build();
		 Credential credential = new AuthorizationCodeInstalledApp(flow, localServerReceiver).authorize("user");
		System.out.println(credential+"=====cred===============");
		return credential;
	}
	
	public static Sheets getSheetsService() throws Exception {
		Credential credential = authorize();
		System.out.println(credential+"credential============================");
		return new Sheets.Builder(GoogleNetHttpTransport.newTrustedTransport(), JacksonFactory.getDefaultInstance(), credential)
				.setApplicationName(APPLICATION_NAME).build();

	}

	
	@RequestMapping(value = "formAction")
	public ModelAndView made(HttpServletRequest request, HttpSession session) throws Exception {
		ModelAndView model = new ModelAndView("/answer");
		String email=request.getParameter("name");
		String password=request.getParameter("pass");
		List<String>googleSheet=new ArrayList<String>();
		String msg="";
			 sheets = getSheetsService();
			 String range = "sheet1";
			  ValueRange response = sheets.spreadsheets().values().get(SpreadSheetID, range).execute();
			  System.out.println(response+"response============================");
			  
			  List<List<Object>> values = response.getValues();
			  
			  String [] str =response.getValues().toString().split("[\\[\\]]");
			 
			  for(int i=0; i<str.length;i++) {
				  System.out.println("===================="+str[i].toString());
				 
			  }
			  
			  System.out.println("values"+ values);
			  if(values ==null || values.isEmpty()) {
				  System.out.println("NO Data Found");
			  }else
			  {
			  for(List row:values) {
						 // System.out.printf("%s %s from %s\n",row.get(2),row.get(3),row.get(0));
						 // System.out.printf("%s %s from %s %s \n",row.get(0),row.get(1),row.get(2),row.get(3),row.get(4));
						  System.out.println(row.get(1)+"  "+row.get(2));
						if(row.get(2).equals(email) && row.get(1).equals(password)) {
							System.out.println("=====+++++++++++ALl Details+++++++++++"+row.toString());
							//model.addObject(row.toString()); 
							googleSheet.add(row.get(0).toString());
							googleSheet.add(row.get(1).toString());
							googleSheet.add(row.get(2).toString());
							googleSheet.add(row.get(3).toString());
							googleSheet.add(row.get(4).toString());
							
						}
						  
					  }
				 
			  }		
			  session.setAttribute("gooleSheet", googleSheet);
			  model.addObject("gooleSheet",googleSheet);
		return model;
		
	
}
}
